{"version":3,"sources":["state/actions/userToken.tsx","state/globalContextState.tsx","constants.tsx","hooks/useGlobalState.tsx","App.tsx","components/Pages/LoadoutOptimizerPage/LoadoutOptimizerPage.tsx","components/Auth/Auth.tsx","components/Pages/Homepage/Homepage.tsx","components/Pages/OAuthCallbackPage/OAuthCallbackPage.tsx","components/bungieApi.tsx","hooks/useAppReducer.tsx","serviceWorker.js","index.js"],"names":["setUserAuth","accessToken","expiresIn","membershipId","state","name","Date","now","window","localStorage","setItem","JSON","stringify","cachedUserAuth","parse","getItem","defaultState","reduce","obj","action","Error","AppStateContext","createContext","AUTH_URL","useGlobalState","useContext","authRoutes","map","Cmp","path","component","props","userAuth","location","href","routes","dispatch","history","useHistory","useEffect","query","qs","search","code","axios","method","headers","data","grant_type","client_id","url","route","getAuthToken","then","res","access_token","expires_in","membership_id","push","key","exact","App","useReducer","Provider","value","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.97902f44.chunk.js","sourcesContent":["export default function setUserAuth(\n  accessToken = '',\n  expiresIn = 0,\n  membershipId = ''\n) {\n  const state = {\n    name: 'userAuth',\n    accessToken: accessToken,\n    membershipId: membershipId,\n    expiresIn: Date.now() + (expiresIn * 1000)\n  };\n\n  if (accessToken) {\n    window.localStorage.setItem('userAuth', JSON.stringify(state));\n  }\n\n  // if no arguments provided, recall cached token\n  if (!accessToken) {\n    const cachedUserAuth = JSON.parse(window.localStorage.getItem('userAuth') || '{}');\n\n    return {\n      ...state,\n      ...cachedUserAuth\n    };\n  }\n\n  return state;\n}\n","import {createContext} from 'react';\nimport setUserAuth from './actions/userToken';\n\nexport type TActionResponse = {name : string, [key : string] : any};\nexport type TAction = (...args : any[]) => TActionResponse;\n\n// register all actions here\nexport const actionList : TAction[] = [\n  setUserAuth\n];\n\nexport const defaultState = actionList.reduce((obj, action) => {\n  const {name, ...state} = action();\n\n  // validate key\n  if (!name) {\n    throw new Error('action must return a `type` value');\n  }\n\n  return {\n    ...obj,\n    // invoke default state\n    [name]: state\n  }\n}, {});\n\nexport const AppStateContext = createContext(defaultState);\n","export const API_TOKEN = 'f5a851a085ec464e8c1af199031b6aec';\nexport const API_CLIENT_ID = '3770';\nexport const API_ROOT_PATH = 'https://www.bungie.net/platform';\nexport const AUTH_URL = `https://www.bungie.net/en/OAuth/Authorize?client_id=${API_CLIENT_ID}&response_type=code`;\n","import {useContext} from 'react';\nimport {AppStateContext} from '../state/globalContextState';\n\nexport function useGlobalState() {\n  return useContext(AppStateContext) as any;\n}\n","import React, {ComponentType, ReactNode} from 'react';\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport {AppStateContext, defaultState} from './state/globalContextState';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Homepage from './components/Pages/Homepage/Homepage';\nimport OAuthCallbackPage from './components/Pages/OAuthCallbackPage/OAuthCallbackPage';\nimport LoadoutOptimizerPage from './components/Pages/LoadoutOptimizerPage/LoadoutOptimizerPage';\nimport {withAuth} from './components/Auth/Auth';\nimport {useAppReducer} from './hooks/useAppReducer';\n\nexport type TRouteItem = [string, ComponentType];\n\nexport const authRoutes : TRouteItem[] = [\n  ['/d2io/optimizer', LoadoutOptimizerPage]\n].map(([path, component]) => ([\n  path as string,\n  withAuth(component) as ComponentType\n]));\n\nexport const routes : ReactNode[] = [\n  ['/d2io', Homepage],\n  ['/d2io/auth', OAuthCallbackPage],\n  ...authRoutes\n].map(([path, component] : any) => (\n  <Route\n    key={path}\n    component={component}\n    path={path}\n    exact\n  />\n));\n\nfunction App() {\n  const [state, dispatch] = useAppReducer();\n\n  return (\n    <AppStateContext.Provider value={{state: JSON.parse(JSON.stringify(state)), dispatch}}>\n      <Router>\n        <Switch>\n          {routes}\n        </Switch>\n      </Router>\n    </AppStateContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\n\nexport default function LoadoutOptimizerPage() {\n  return (\n    <div>\n      loadout optimizer page\n    </div>\n  );\n}\n","import React from 'react';\nimport {useGlobalState} from '../../hooks/useGlobalState';\nimport {AUTH_URL} from '../../constants';\n\nexport function withAuth(Cmp : any) {\n  return function Auth(props : any) {\n    const {state} = useGlobalState();\n\n    // if the token is expired, run refresh token call\n    const isTokenStale = state.userAuth.accessToken ? (Date.now() >= state.userAuth.expiresIn) : true;\n\n    // // if there's no access token, redirect to auth page\n    if (isTokenStale) {\n      window.location.href = AUTH_URL;\n      return <div />;\n    }\n\n    return (\n      <Cmp {...props} />\n    );\n  }\n}\n","import React from 'react';\nimport {AnchorButton} from '@blueprintjs/core';\n\nexport default function Homepage() {\n  return (\n    <div>\n      <AnchorButton href=\"https://www.bungie.net/en/OAuth/Authorize?client_id=3770&response_type=code\">\n        Sync Destiny 2 Characters\n      </AnchorButton>\n    </div>\n  );\n}\n","import React, {useEffect, useState} from 'react';\nimport qs from 'query-string';\nimport {RouteComponentProps, useHistory} from 'react-router';\nimport {getAuthToken} from '../../bungieApi';\nimport setUserAuth from '../../../state/actions/userToken';\nimport {useGlobalState} from '../../../hooks/useGlobalState';\n\nexport default function OAuthCallbackPage({location} : RouteComponentProps) {\n  const {dispatch} = useGlobalState();\n  const history = useHistory();\n\n  useEffect(() => {\n    const query : {code ?: string} = qs.parse(location.search);\n\n    if (query.code) {\n      getAuthToken(query.code || '')\n        .then((res) => {\n          dispatch(setUserAuth(\n            res.data.access_token,\n            res.data.expires_in,\n            res.data.membership_id\n          ));\n\n          history.push('/d2io/optimizer')\n        })\n    }\n  }, [dispatch, location, history]);\n\n  return (\n    <div>\n      authenticating...\n    </div>\n  );\n}\n","import axios from 'axios';\nimport qs from 'query-string';\nimport {API_CLIENT_ID, API_ROOT_PATH, API_TOKEN} from '../constants';\n\nexport function httpBungie(route : string) {\n  return API_ROOT_PATH + route;\n}\n\nexport function bungieRequestHeaders() {\n  return {\n    'x-api-key': API_TOKEN\n  };\n}\n\nexport function getAuthToken(code : string) {\n  return axios({\n    method: 'POST',\n    headers: {\n      ...bungieRequestHeaders(),\n      'content-type': 'application/x-www-form-urlencoded'\n    },\n    data: qs.stringify({\n      code,\n      grant_type: 'authorization_code',\n      client_id: API_CLIENT_ID\n    }),\n    url: httpBungie('/app/oauth/token/')\n  });\n}\n\n// code = bda900afab7391b4e203f1d9968aaf63\nexport default function getMembershipsForCurrentUser() {\n  return axios({\n    url: 'https://www.bungie.net/Platform/Destiny2/User/GetMembershipsForCurrentUser',\n    headers: {\n      ...bungieRequestHeaders()\n    }\n  })\n}\n","import {useReducer} from 'react';\nimport {defaultState, TActionResponse} from '../state/globalContextState';\n\nexport function useAppReducer() {\n  return useReducer((state : any, action : TActionResponse) => {\n    const {name, ...data} = action;\n\n    state[name] = data;\n\n    return JSON.parse(JSON.stringify(state));\n  }, defaultState);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}