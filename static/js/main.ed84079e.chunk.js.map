{"version":3,"sources":["state/actions/userToken.tsx","state/actions/profile.tsx","state/actions/manifest.tsx","state/globalContextState.tsx","constants.tsx","api/bungieApi.tsx","hooks/useGlobalState.tsx","App.tsx","components/Pages/LoadoutOptimizerPage/LoadoutOptimizerPage.tsx","components/Auth/Auth.tsx","components/Pages/Homepage/Homepage.tsx","components/Pages/OAuthCallbackPage/OAuthCallbackPage.tsx","hooks/useAppReducer.tsx","serviceWorker.js","index.js"],"names":["setUserAuth","accessToken","expiresIn","membershipId","membershipType","state","name","Date","now","window","localStorage","setItem","JSON","stringify","cachedUserAuth","parse","getItem","setProfile","data","setManifest","contentPath","version","setComponentContent","defaultState","reduce","obj","action","Error","AppStateContext","createContext","API_TOKEN","API_ROOT_PATH","AUTH_URL","bungieRequestHeaders","userAuth","location","href","Authorization","useGlobalState","useContext","authRoutes","dispatch","useState","isLoading","setIsLoading","useEffect","manifest","Promise","all","axios","url","params","components","headers","then","profile","Response","jsonWorldComponentContentPaths","en","DestinyRecordDefinition","res","console","log","map","Cmp","path","component","props","routes","history","useHistory","query","qs","search","code","method","grant_type","client_id","route","getAuthToken","membershipRes","access_token","expires_in","destinyMemberships","push","key","exact","App","useReducer","Provider","value","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ed84079e.chunk.js","sourcesContent":["export interface IUserAuth {\n  name : string,\n  accessToken : string,\n  membershipId : string;\n  membershipType : string;\n  expiresIn : number;\n}\n\nexport default function setUserAuth(\n  accessToken = '',\n  expiresIn = 0,\n  membershipId = '',\n  membershipType = ''\n) : IUserAuth {\n  const state = {\n    name: 'userAuth',\n    accessToken: accessToken,\n    membershipId: membershipId,\n    expiresIn: Date.now() + (expiresIn * 1000),\n    membershipType : membershipType\n  };\n\n  if (accessToken) {\n    window.localStorage.setItem('userAuth', JSON.stringify(state));\n  }\n\n  // if no arguments provided, recall cached token\n  if (!accessToken) {\n    const cachedUserAuth = JSON.parse(window.localStorage.getItem('userAuth') || '{}');\n\n    return {\n      ...state,\n      ...cachedUserAuth\n    };\n  }\n\n  return state;\n}\n","export interface IManifest {\n  data : any\n  name : string;\n}\n\nexport function setProfile(data ?: any) : IManifest {\n  return {\n    name: 'profile',\n    ...data\n  };\n}\n","export interface IManifest {\n  contentPath : string;\n  version : string;\n  name : string;\n}\n\nexport function setManifest(data = {contentPath: '', version: ''}) : IManifest {\n  return {\n    name: 'manifest',\n    ...data\n  };\n}\n\nexport function setComponentContent(data : any) {\n  return {\n    name: 'componentContent',\n    ...data\n  }\n}\n","import {createContext} from 'react';\nimport setUserAuth from './actions/userToken';\nimport {setProfile} from './actions/profile';\nimport {setComponentContent, setManifest} from './actions/manifest';\n\nexport type TActionResponse = {name : string, [key : string] : any};\nexport type TAction = (...args : any[]) => TActionResponse;\n\n// register all actions here\nexport const actionList : TAction[] = [\n  setUserAuth,\n  setProfile,\n  setManifest,\n  setComponentContent\n];\n\nexport const defaultState = actionList.reduce((obj, action) => {\n  const {name, ...state} = action();\n\n  // validate key\n  if (!name) {\n    throw new Error('action must return a `type` value');\n  }\n\n  return {\n    ...obj,\n    // invoke default state\n    [name]: state\n  }\n}, {});\n\nexport const AppStateContext = createContext(defaultState);\n","export const API_TOKEN = 'f5a851a085ec464e8c1af199031b6aec';\nexport const API_CLIENT_ID = '3770';\nexport const API_ROOT_PATH = 'https://www.bungie.net/platform';\nexport const AUTH_URL = `https://www.bungie.net/en/OAuth/Authorize?client_id=${API_CLIENT_ID}&response_type=code`;\n","import axios from 'axios';\nimport qs from 'query-string';\nimport {API_CLIENT_ID, API_ROOT_PATH, API_TOKEN, AUTH_URL} from '../constants';\nimport {IUserAuth} from '../state/actions/userToken';\n\nexport function httpBungie(route : string) {\n  return API_ROOT_PATH + route;\n}\n\nexport function bungieRequestHeaders(userAuth ?: IUserAuth) {\n  if (userAuth) {\n    const isTokenStale = userAuth.accessToken ? (Date.now() >= userAuth.expiresIn) : true;\n\n    // immediately redirect if the token is stale\n    if (isTokenStale) {\n      window.location.href = '/d2io';\n    }\n\n    return {\n      'x-api-key': API_TOKEN,\n      Authorization: `Bearer ${userAuth.accessToken}`\n    };\n  }\n\n  return {\n    'x-api-key': API_TOKEN\n  };\n}\n\nexport function getAuthToken(code : string) {\n  return axios({\n    method: 'POST',\n    headers: {\n      ...bungieRequestHeaders(),\n      'content-type': 'application/x-www-form-urlencoded'\n    },\n    data: qs.stringify({\n      code,\n      grant_type: 'authorization_code',\n      client_id: API_CLIENT_ID\n    }),\n    url: httpBungie('/app/oauth/token/')\n  });\n}\n\nexport function getMembershipsForCurrentUser(userAuth : IUserAuth) {\n  return axios({\n    url: `${API_ROOT_PATH}/User/GetMembershipsForCurrentUser`,\n    headers: bungieRequestHeaders(userAuth)\n  });\n}\n\nexport function getProfile(userAuth : IUserAuth) {\n  return axios({\n    url: `https://www.bungie.net/Platform/Destiny2/${userAuth.membershipType}/Profile/${userAuth.membershipId}`,\n    params: {\n      components: '100,102,103,200,201,202,205,300,301,304,305,306,307,800,308,310,309,900,1100'\n    },\n    headers: bungieRequestHeaders(userAuth)\n  });\n}\n\nexport function getManifest() {\n  return axios({\n    url: `${API_ROOT_PATH}/Destiny2/Manifest`,\n    headers: bungieRequestHeaders()\n  });\n}\n\n","import {useContext} from 'react';\nimport {AppStateContext} from '../state/globalContextState';\n\nexport function useGlobalState() {\n  return useContext(AppStateContext) as any;\n}\n","import React, {ComponentType, ReactNode} from 'react';\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport {AppStateContext, defaultState} from './state/globalContextState';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Homepage from './components/Pages/Homepage/Homepage';\nimport OAuthCallbackPage from './components/Pages/OAuthCallbackPage/OAuthCallbackPage';\nimport LoadoutOptimizerPage from './components/Pages/LoadoutOptimizerPage/LoadoutOptimizerPage';\nimport {withAuth} from './components/Auth/Auth';\nimport {useAppReducer} from './hooks/useAppReducer';\n\nexport type TRouteItem = [string, ComponentType];\n\nexport const authRoutes : TRouteItem[] = [\n  ['/d2io/optimizer', LoadoutOptimizerPage]\n].map(([path, component]) => ([\n  path as string,\n  withAuth(component) as ComponentType\n]));\n\nexport const routes : ReactNode[] = [\n  ['/d2io', Homepage],\n  ['/d2io/auth', OAuthCallbackPage],\n  ...authRoutes\n].map(([path, component] : any) => (\n  <Route\n    key={path}\n    component={component}\n    path={path}\n    exact\n  />\n));\n\nfunction App() {\n  const [state, dispatch] = useAppReducer();\n\n  return (\n    <AppStateContext.Provider value={{state: JSON.parse(JSON.stringify(state)), dispatch}}>\n      <Router>\n        <Switch>\n          {routes}\n        </Switch>\n      </Router>\n    </AppStateContext.Provider>\n  );\n}\n\nexport default App;\n","import React, {useEffect, useState} from 'react';\nimport {useGlobalState} from '../../../hooks/useGlobalState';\nimport {getManifest, getProfile} from '../../../api/bungieApi';\nimport {setComponentContent, setManifest} from '../../../state/actions/manifest';\nimport {setProfile} from '../../../state/actions/profile';\nimport axios from 'axios';\n\nexport default function LoadoutOptimizerPage() {\n  const {state, dispatch} = useGlobalState();\n  const [isLoading, setIsLoading] = useState(true);\n\n  // get data\n  useEffect(() => {\n    // if there's a version, do nothings\n    if (state.manifest.version) {\n      setIsLoading(false);\n      return;\n    }\n\n    Promise.all([\n      getProfile(state.userAuth),\n      getManifest()\n    ])\n      .then(([profile, manifest]) => {\n        dispatch(setManifest({\n          contentPath: manifest.data.Response.jsonWorldComponentContentPaths.en.DestinyRecordDefinition,\n          version: manifest.data.Response.version\n        }));\n\n        dispatch(setProfile({\n          data: profile.data.Response\n        }));\n\n\n        return axios({\n          url: `https://www.bungie.net${manifest.data.Response.jsonWorldComponentContentPaths.en.DestinyRecordDefinition}`\n        });\n      })\n      .then((res) => {\n        dispatch(setComponentContent(res.data))\n        setIsLoading(false);\n      });\n  }, [state.userAuth, state.manifest, setIsLoading]);\n\n  console.log(state);\n\n  if (isLoading) {\n    return (\n      <div>\n        Loading profile data...\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      loadout optimizer page test2\n    </div>\n  );\n}\n","import React from 'react';\nimport {useGlobalState} from '../../hooks/useGlobalState';\nimport {AUTH_URL} from '../../constants';\n\nexport function withAuth(Cmp : any) {\n  return function Auth(props : any) {\n    const {state} = useGlobalState();\n\n    // if the token is expired, run refresh token call\n    const isTokenStale = state.userAuth.accessToken ? (Date.now() >= state.userAuth.expiresIn) : true;\n\n    // // if there's no access token, redirect to auth page\n    if (isTokenStale) {\n      window.location.href = AUTH_URL;\n      return <div />;\n    }\n\n    return (\n      <Cmp {...props} />\n    );\n  }\n}\n","import React from 'react';\nimport {AnchorButton} from '@blueprintjs/core';\n\nexport default function Homepage() {\n  return (\n    <div>\n      <AnchorButton href=\"https://www.bungie.net/en/OAuth/Authorize?client_id=3770&response_type=code\">\n        Sync Destiny 2 Characters\n      </AnchorButton>\n    </div>\n  );\n}\n","import React, {useEffect} from 'react';\nimport qs from 'query-string';\nimport {RouteComponentProps, useHistory} from 'react-router';\nimport {getMembershipsForCurrentUser, getAuthToken} from '../../../api/bungieApi';\nimport setUserAuth from '../../../state/actions/userToken';\nimport {useGlobalState} from '../../../hooks/useGlobalState';\n\nexport default function OAuthCallbackPage({location} : RouteComponentProps) {\n  const {dispatch, state} = useGlobalState();\n  const history = useHistory();\n\n  useEffect(() => {\n    const query : {code ?: string} = qs.parse(location.search);\n\n    if (query.code) {\n      getAuthToken(query.code || '')\n        .then((res) => Promise.all([\n          res,\n          getMembershipsForCurrentUser(state.userAuth)\n        ]))\n        .then(([res, membershipRes]) => {\n          dispatch(setUserAuth(\n            res.data.access_token,\n            res.data.expires_in,\n            membershipRes.data.Response.destinyMemberships[0].membershipId,\n            membershipRes.data.Response.destinyMemberships[0].membershipType\n          ));\n\n          history.push('/d2io/optimizer');\n        });\n    }\n  }, [dispatch, location, history]);\n\n  return (\n    <div>\n      authenticating...\n    </div>\n  );\n}\n","import {useReducer} from 'react';\nimport {defaultState, TActionResponse} from '../state/globalContextState';\n\nexport function useAppReducer() {\n  return useReducer((state : any, action : TActionResponse) => {\n    const {name, ...data} = action;\n\n    state[name] = data;\n\n    return JSON.parse(JSON.stringify(state));\n  }, defaultState);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}